{"name":"Express Path","tagline":"Easy route mapping for Express","body":"[![Build Status](https://travis-ci.org/hyubs/express-path.png?branch=master)](https://travis-ci.org/hyubs/express-path)\r\n[![Dependency Status](https://gemnasium.com/hyubs/express-path.png)](https://gemnasium.com/hyubs/express-path)\r\n\r\n## Installation\r\n\r\nvia npm:\r\n\r\n```bash\r\n$ npm install express-path\r\n```\r\n\r\n## Updates and Changes\r\n\r\n* 2013-08-12 - Version 0.2.0 is out! Package was rewritten, making it testable. New major feature is the support for middlewares. Some minor features are turning on/off the console.logs and error throwing.\r\n* 2013-07-31 - This project is gaining some modest amount of attention. Thank you! Started working on v0.2.0. Refactoring the code so that I can include unit tests. No major features added (yet). Feel free to file bug reports or enhancement requests.\r\n* 2013-07-18 - Started refactoring the code for v0.1.0. Most notable difference is I removed `init()` and replaced it with `()`. Also, you can now pass a file name for the route map and Express Path will load it.\r\n\r\n\r\n## Usage\r\n\r\n### Express Application\r\n\r\nHere's a quick example on how to use this module with your Express application.\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\nvar expressPath = require('express-path')\r\n\r\n// Your express settings here\r\n\r\nvar routes = [\r\n\t// Route mapping here\r\n];\r\nexpressPath(app, routes);\r\n\r\n// All your other stuff before the server starts\r\n```\r\n\r\n### Route Mapping\r\n\r\nThe 2nd parameter of `()` can be any of the following:\r\n\r\n* \ta 2-dimensional array in the format as shown below\r\n\r\n\t```javascript\r\n\t[\r\n\t\t[urlPath, controllerMethod], // httpRequestMethod defaults to 'all'\r\n\t\t[urlPath, controllerMethod, httpRequestMethod],\r\n\t\t[urlPath, controllerMethod, middlewareMethod, httpRequestMethod],\r\n\t\t[urlPath, controllerMethod, middlewareMethod1, middlewareMethod2, ... , httpRequestMethod], // etc\r\n\t]\r\n\t```\r\n\r\n\tExample\r\n\r\n\t```javascript\r\n\t// In your app.js\r\n\tvar routes = [\r\n\t\t['/', 'index#index'],\r\n\t\t['login', 'auth#login', 'post'],\r\n\t\t['items/comments/create', 'items/comments#create', 'auth#login', 'post'],\r\n\t\t['admin/users/remove', 'admin/users#remove', 'auth#login', 'auth#isAdmin', 'post']\r\n\t];\r\n\texpressPath(app, routes);\r\n\t```\r\n\r\n\t* \t`urlPath` is the URL path relative to the root of your Node.JS app server.\r\n\t* \t`controllerMethod` is a \\# delimeted string containing the controller (the JS file) and the method (the JS function of the route).\r\n\t* \t`middlewareMethod` is an optional parameter which defines middlewares Express will use before your controller. You can add many of these as shown in the example. You have to define an `httpRequestMethod` if you add this parameter.\r\n\t* \t`httpRequestMethod` is an optional parameter (required if you have `middlewareMethod`) which tells Express which type of HTTP requests will be routed to the controller's method. Accepted parameters are listed below.\r\n\t\t* \t`all` (any HTTP request)\r\n\t\t*\t`get`\r\n\t\t* \t`post`\r\n\t\t* \t`put`\r\n\t\t* \t`delete`\r\n\r\n* \ta string containing a relative path to your route map file\r\n\r\n\tIf you are using a separate file, just use `module.exports` with your array.\r\n\r\n\t```javascript\r\n\t// In your routeMap.js\r\n\tmodule.exports = [\r\n\t\t['/', 'index#index'],\r\n\t\t['login', 'auth#login', 'post'],\r\n\t\t['items/comments/create', 'items/comments#create', 'auth#login', 'post'],\r\n\t\t['admin/users/remove', 'admin/users#remove', 'auth#login', 'auth#isAdmin', 'post']\r\n\t];\r\n\r\n\t// In your app.js\r\n\texpressPath(app, 'routeMap');\r\n\t```\r\n\r\n\r\n### Controllers/Methods\r\n\r\nJust follow the default Express routes file for your controllers.\r\n\r\nBy default, Express Path will look for your files under `/controllers/`.\r\n\r\n```javascript\r\n// For example this is in controllers/users.js\r\nexports.login = function(req, res){\r\n\r\n};\r\n```\r\n\r\nFor the sample code above, you need a route map like this:\r\n\r\n```javascript\r\nvar routes = [\r\n\t['/users/login', 'users#login']\r\n];\r\n\r\nexpressPath(app, routes);\r\n```\r\n\r\nYou can now go to `/users/login` to see your page.\r\n\r\n\r\n### Middlewares\r\n\r\nExpress Path now supports middlewares. These are called in sequence before your controller is called.\r\n\r\nBy default, Express Path will look for your files under `/middlewares/`.\r\n\r\n```javascript\r\n// For example this is in middlewares/auth.js\r\nexports.login = function(req, res, next){\r\n\tif(/* code to check if user is logged in */) {\r\n\t\t// Allow Express to continue to the next middleware or your controller\r\n\t\tnext();\r\n\t}\r\n   else {\r\n   \t// Not logged in! You can do redirects here.\r\n\t}\r\n};\r\n\r\nexports.isAdmin = function(req, res, next){\r\n\tif(/* code to check if user is an admin */) {\r\n\t\t// Allow Express to continue to the next middleware or your controller\r\n\t\tnext();\r\n\t}\r\n   else {\r\n   \t// Not an admin! You can do redirects here.\r\n\t}\r\n};\r\n\r\nFor the sample code above, you need a route map like this:\r\n\r\nvar routes = [\r\n\t['admin/users/remove', 'admin/users#remove', 'auth#login', 'auth#isAdmin', 'post']\r\n];\r\n\r\nexpressPath(app, routes);\r\n```\r\n\r\n\r\n### Parameters\r\n\r\nYou can add a 3rd parameter in `()` to set optional parameters.\r\n\r\nExample\r\n\r\n```javascript\r\nexpressPath(app, routes, { \"controllersPath\" : \"routes\" });\r\n```\r\n\r\n*\t`controllersPath` (string) - Defaults to \"controllers\"\r\n\r\n\tPath of the directory relative to the app's main script.\r\n\r\n\tExample:\r\n\r\n\t```bash\r\n\tcd /home/user/mynodeapp\r\n\tnode app.js\r\n\r\n\t// Express Path will try to look for your controllers in /home/user/mynodeapp/controllers\r\n\t```\r\n\r\n*\t`middlewaresPath` (string) - Defaults to \"middlewares\"\r\n\r\n\tPath of the directory relative to the app's main script.\r\n\r\n\tExample:\r\n\r\n\t```bash\r\n\tcd /home/user/mynodeapp\r\n\tnode app.js\r\n\r\n\t// Express Path will try to look for your middlewares in /home/user/mynodeapp/middlewares\r\n\t```\r\n\r\n*\t`strict` (boolean) - Defaults to true\r\n\r\n\tIf this is true, Express Path will throw errors during route mapping. Otherwise, it just displays the errors in the console.\r\n\r\n*\t`verbose` (boolean) - Defaults to true\r\n\r\n\tIf this is true, Express Path will show all console logs (including errors). Otherwise, it will not display anything.\r\n\r\n\r\n\r\n## License\r\n\r\nMIT License. Read the LICENSE file.\r\n\r\nIn summary, you can do whatever you want with the code but if it breaks, sorry :(\r\n\r\n\r\n## Contributions\r\n\r\n### Thanks\r\n\r\nThank you to the following people who contributed code or ideas for this module:\r\n\r\n* [@petecoop](https://github.com/petecoop)\r\n* [@RoToRa](http://www.reddit.com/user/RoToRa)\r\n\r\n### How to Contribute\r\n\r\nIf you find bugs or think some parts can be improved, please post the request on GitHub.\r\n\r\nIf you want to fix it yourself, kudos! Fork the repo, do your magic, and invoke a pull request. I'll be sure to thank you and add you here as a contributor.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}