{"name":"Express Path","tagline":"Easy route mapping for Express","body":"[![Build Status](https://travis-ci.org/hyubs/express-path.png?branch=master)](https://travis-ci.org/hyubs/express-path)\r\n[![Dependency Status](https://gemnasium.com/hyubs/express-path.png)](https://gemnasium.com/hyubs/express-path)\r\n\r\n## Installation\r\n\r\nvia npm:\r\n\r\n```bash\r\n$ npm install express-path\r\n```\r\n\r\n## Updates and Changes\r\n\r\n* 2013-07-18 - Started refactoring the code for v0.1.0. Most notable difference is I removed `init()` and replaced it with `()`. Also, you can now pass a file name for the route map and Express Path will load it.\r\n\r\n\r\n## Usage\r\n\r\n### Express Application\r\n\r\nHere's a quick example on how to use this module with your Express application.\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\nvar expressPath = require('express-path')\r\n\r\n// Your express settings here\r\n\r\nvar routes = [\r\n\t// Route mapping here\r\n];\r\nexpressPath(app, routes);\r\n\r\n// All your other stuff before the server starts\r\n```\r\n\r\n### Route Mapping\r\n\r\nThe 2nd parameter of `()` can be any of the following:\r\n\r\n* \ta 2-dimensional array in the format as shown below\r\n\r\n\t```javascript\r\n\t[\r\n\t\t[urlPath, controllerMethod, httpRequestMethod],\r\n\t\t[urlPath, controllerMethod, httpRequestMethod],\r\n\t\t[urlPath, controllerMethod, httpRequestMethod], // etc\r\n\t]\r\n\t```\r\n\r\n\tExample\r\n\r\n\t```javascript\r\n\t// In your app.js\r\n\tvar routes = [\r\n\t\t['/', 'index#index'],\r\n\t\t['users/add', 'users#add', 'post'],\r\n\t\t['users', 'users#list', 'get']\r\n\t];\r\n\texpressPath(app, routes);\r\n\t```\r\n\r\n\t* \t`urlPath` is the URL path relative to the root of your Node.JS app server.\r\n\t* \t`controllerMethod` is a \\# delimeted string containing the controller (the JS file) and the method (the JS function of the route).\r\n\t* \t`httpRequestMethod` is an optional parameter which tells Express which type of HTTP requests will be routed to the controller's method. Accepted parameters are listed below.\r\n\t\t* \t`all` (any HTTP request)\r\n\t\t*\t`get`\r\n\t\t* \t`post`\r\n\t\t* \t`put`\r\n\t\t* \t`delete`\r\n\r\n* \ta string containing a relative path to your route map file\r\n\r\n\tIf you are using a separate file, just use `module.exports` with your array.\r\n\r\n\t```javascript\r\n\t// In your routeMap.js\r\n\tmodule.exports = [\r\n\t\t['/', 'index#index'],\r\n\t\t['users/add', 'users#add', 'post'],\r\n\t\t['users', 'users#list', 'get']\r\n\t];\r\n\r\n\t// In your app.js\r\n\texpressPath(app, 'routeMap');\r\n\t```\r\n\r\n\r\n### Controllers/Methods\r\n\r\nJust follow the default Express routes file for your controllers.\r\n\r\nBy default, Express Path will look for your files under `/controllers/`.\r\n\r\n```javascript\r\n// For example this is in controllers/users.js\r\nexports.login = function(req, res){\r\n\r\n};\r\n```\r\n\r\nFor the sample code above, you need a route map like this:\r\n\r\n```javascript\r\nvar routes = [\r\n\t['/users/login', 'users#login']\r\n];\r\n\r\nexpressPath(app, routes);\r\n```\r\n\r\nYou can now go to `/users/login` to see your page.\r\n\r\n\r\n### Parameters\r\n\r\nYou can add a 3rd parameter in `()` to set optional parameters (currently, there's only one option available).\r\n\r\nExample\r\n\r\n```javascript\r\nexpressPath(app, routes, { \"controllersPath\" : \"routes\" });\r\n```\r\n\r\n*\t`controllersPath` (string) - Defaults to \"controllers\"\r\n\r\n\tPath of the directory relative to the app's main script.\r\n\r\n\tExample:\r\n\r\n\t```bash\r\n\tcd /home/user/mynodeapp\r\n\tnode app.js\r\n\r\n\t# Express Path will try to look for your controllers in /home/user/mynodeapp/controllers\r\n\t```\r\n\r\n## License\r\n\r\nMIT License. Read the LICENSE file.\r\n\r\nIn summary, you can do whatever you want with the code but if it breaks, sorry :(\r\n\r\n\r\n## Contributions\r\n\r\nIf you find bugs or think some parts can be improved, please post the request on GitHub.\r\n\r\nIf you want to fix it yourself, kudos! Fork the repo, do your magic, and invoke a pull request. I'll be sure to thank you and add you here as a contributor.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}